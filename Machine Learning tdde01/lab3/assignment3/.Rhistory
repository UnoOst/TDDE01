content = cbind(cnames1, coord)
kbl(content, caption = "Coordinates for place of interest", col.names = c("Askim", "Coordinates")) %>%
kable_styling(latex_options = "hold_position", position = "left")
```
We begin with importing the relevant datafiles, merging them together to get the temperature at a certain station at a certain time. We then filter out the data that's after the date of interest. The kernel that will be used is the Gaussian kernel, which looks like this:
Gaussian kernel: $k(u) = exp(-||u||^2)$, where $||*||$ is the Euclidean norm.
The first kernel to account is for the physical distance from a station to the point of interest and we use the function distHaversine() from the R package geosphere to calculate the circular distance from one point to another.
```{r kernel 1, echo=FALSE}
# Weighing factor for distance
h_dist <- 250000 #meter -> 250km
# Kernel 1, Function for calculating the distance from a station to a point of interest
dist_kernel = function(poi, data, h) {
dist <- distHaversine(poi, data.frame(data$latitude, data$longitude)) #returns in meter
u <- dist/h
return (exp(-u^2))
}
```
The second kernel to  account is for the distance between the day a temperature measurement was made and the day of interest. We use the as.Date function to calculate the distance between to dates.
```{r kernel 2, echo=FALSE}
# Weighing factor for date
h_date <- 20
#Kernel 2, distance between the day a temperature measurement was made and the day of interest
day_kernel = function(doi, data, h) {
diff_tot <- (as.numeric(as.Date(data$date) - as.Date(doi), unit="days")) #difference in unit days
diffdays <- diff_tot%%365 #take the year in consideration
u <- diffdays/h
return (exp(-u^2)) #kernel
}
```
The third kernel to account is for the distance between the hour of the day a temperature measurement was made and the hour of interest. We use the function difftime() to calculate the difference in seconds from time to another. The we convert it to hours as it's the format we seek.
```{r kernel 3, echo=FALSE}
# Weighing factor for time
h_time <- 4
#Kernel 3, distance between the hour of the day a temperature measurement was made and the hour of interest
hour_kernel = function(toi, data, h) {
diff_sec <- difftime(strptime(data$time , format = "%H:%M:%S"),  #time differences in seconds
strptime(toi , format = "%H:%M:%S"))        #date-time conversion functions to and from character
diff_hour <- as.numeric(diff_sec/(3600))                              #from sec to  hour
u <- diff_hour/h
return (exp(-u^2)) #kernel
}
```
Now we can calculate the sum of three Gaussian kernels above into a new kernel and predict the hourly temperatures.
The times and corresponding temperatures is seen below:
```{r}
#Function for calculate the predicted temperature by the sum of kernels at a certain time
calcSum = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, filtered_st, h_dist)
date_k = day_kernel(doi, filtered_st, h_date)
hour_k = hour_kernel(hoi, filtered_st, h_time)
sum_k <- dist_k+date_k+hour_k #summing up the kernel values
#Prediction of the temp for the 11 kernel values with (Gaussian) Kernel Regression, weighted kernel for the observations
sum_temp = sum(sum_k * filtered_st$air_temperature)/sum(sum_k)
return(sum_temp)
}
pred_temp_sum = c()
#Looping through time in times of interest and predict the temperature
for (i in 1:n) {
pred_temp_sum[i] = calcSum(filtered_st, po_i, date_i, times_i[i])
}
#Create table with the time corresponding and temperatures
table <- cbind(times_i, pred_temp_sum)
kbl(table, caption = "Temperatures for sum kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
set.seed(1234567890)
library(ggplot2)
library(geosphere)
library(dplyr)
library(knitr)
library(kableExtra)
#1 Implement Kernel Method to predict hourly temp/day (4am -24pm)
# Read data
station_data <- read.csv("stations.csv")
temp_data <- read.csv("temps50k.csv")
# MErge two files with respect to station_number
st <- merge(station_data, temp_data, by = "station_number")
n = dim(st)[1]
#Coordinates of place to predict
a <- 57.6339 # Latitude
b <- 11.9399 # Longitude
po_i = c(a,b)
date_i = "1996-02-23"
times_i = c("04:00:00", "06:00:00", "08:00:00", "10:00:00",
"12:00:00", "14:00:00", "16:00:00", "18:00:00",
"20:00:00", "22:00:00", "24:00:00") #11 different times of interest
n = length(times_i)
#Remove posterior data
filter_st = st[st$date >= "1941-08-31" & st$date >= "1996-02-23",]
#Table for coordinates
cnames1 = c("Latitude", "Longitude")
coord = c(a,b)
content = cbind(cnames1, coord)
kbl(content, caption = "Coordinates for place of interest", col.names = c("Askim", "Coordinates")) %>%
kable_styling(latex_options = "hold_position", position = "left")
####KERNEL FOR DISTANCE######
# Weighing factor for distance
h_dist <- 250000 #meter -> 250km
# Kernel 1, Function for calculating the distance from a station to a point of interest
dist_kernel = function(poi, data, h) {
dist <- distHaversine(poi, data.frame(data$latitude, data$longitude)) #returns in meter
u <- dist/h
return (exp(-u^2))
}
####KERNEL FOR DATE######
# Weighing factor for date
h_date <- 20
#Kernel 2, distance between the day a temperature measurement was made and the day of interest
day_kernel = function(doi, data, h) {
diff_tot <- (as.numeric(as.Date(data$date) - as.Date(doi), unit="days")) #difference in unit days
diffdays <- diff_tot%%365 #take the year in consideration
u <- diffdays/h
return (exp(-u^2)) #kernel
}
####KERNEL FOR TIME######
# Weighing factor for time
h_time <- 4
#Kernel 3, distance between the hour of the day a temperature measurement was made and the hour of interest
hour_kernel = function(toi, data, h) {
diff_sec <- difftime(strptime(data$time , format = "%H:%M:%S"),  #time differences in seconds
strptime(toi , format = "%H:%M:%S"))        #date-time conversion functions to and from character
diff_hour <- as.numeric(diff_sec/(3600))                              #from sec to  hour
u <- diff_hour/h
return (exp(-u^2)) #kernel
}
# Calculate the sum of the three gaussian kernels
#Function for calculate the predicted temperature by the sum of kernels at a certain time
calcSum = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, filter_st, h_dist)
date_k = day_kernel(doi, filter_st, h_date)
hour_k = hour_kernel(hoi, filter_st, h_time)
sum_k <- dist_k+date_k+hour_k #summing up the kernel values
#Prediction of the temp for the 11 kernel values with (Gaussian) Kernel Regression, weighted kernel for the observations
sum_temp = sum(sum_k * filter_st$air_temperature)/sum(sum_k)
return(sum_temp)
}
pred_temp_sum = c()
#Looping through time in times of interest and predict the temperature
for (i in 1:n) {
pred_temp_sum[i] = calcSum(filter_st, po_i, date_i, times_i[i])
}
#Create table with the time corresponding and temperatures
table <- cbind(times_i, pred_temp_sum)
kbl(table, caption = "Temperatures for sum kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
# Read the data
library(readr)
station_data <- read_csv("./stations.csv") #info about stations
temp_data <- read_csv("./temps50k.csv") #info about temp and date
# Merge the two file with respect to station_number
st <- merge(station_data,temp_data,by="station_number")
n = dim(st)[1]
# Coordinates of place to predict (Askim)
a <- 57.6339 #latitude
b <- 11.9399 #longitude
po_i = c(a,b) #latitude, longitude of point of interest
date_i <- "1996-02-23" # My birthday
times_i <- c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00", "22:00:00", "24:00:00") #11 different times of interest
n = length(times_i)
#pred_temp_sum = c(nrow=n, ncol=1)
#pred_temp_prod = c(nrow=n, ncol=1)
#Removing the posterior data
filtered_st <- st[st$date >= "1941-08-31" & st$date <= "1996-02-23",]
#Table for coordinates
cnames1 = c("Latitude", "Longitude")
coord = c(a,b)
content = cbind(cnames1, coord)
kbl(content, caption = "Coordinates for place of interest", col.names = c("Askim", "Coordinates")) %>%
kable_styling(latex_options = "hold_position", position = "left")
# Weighing factor for distance
h_dist <- 250000 #meter -> 250km
# Kernel 1, Function for calculating the distance from a station to a point of interest
dist_kernel = function(poi, data, h) {
dist <- distHaversine(poi, data.frame(data$latitude, data$longitude)) #returns in meter
u <- dist/h
return (exp(-u^2))
}
# Weighing factor for date
h_date <- 20
#Kernel 2, distance between the day a temperature measurement was made and the day of interest
day_kernel = function(doi, data, h) {
diff_tot <- (as.numeric(as.Date(data$date) - as.Date(doi), unit="days")) #difference in unit days
diffdays <- diff_tot%%365 #take the year in consideration
u <- diffdays/h
return (exp(-u^2)) #kernel
}
# Weighing factor for time
h_time <- 4
#Kernel 3, distance between the hour of the day a temperature measurement was made and the hour of interest
hour_kernel = function(toi, data, h) {
diff_sec <- difftime(strptime(data$time , format = "%H:%M:%S"),  #time differences in seconds
strptime(toi , format = "%H:%M:%S"))        #date-time conversion functions to and from character
diff_hour <- as.numeric(diff_sec/(3600))                              #from sec to  hour
u <- diff_hour/h
return (exp(-u^2)) #kernel
}
#Function for calculate the predicted temperature by the sum of kernels at a certain time
calcSum = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, filtered_st, h_dist)
date_k = day_kernel(doi, filtered_st, h_date)
hour_k = hour_kernel(hoi, filtered_st, h_time)
sum_k <- dist_k+date_k+hour_k #summing up the kernel values
#Prediction of the temp for the 11 kernel values with (Gaussian) Kernel Regression, weighted kernel for the observations
sum_temp = sum(sum_k * filtered_st$air_temperature)/sum(sum_k)
return(sum_temp)
}
pred_temp_sum = c()
#Looping through time in times of interest and predict the temperature
for (i in 1:n) {
pred_temp_sum[i] = calcSum(filtered_st, po_i, date_i, times_i[i])
}
#Create table with the time corresponding and temperatures
table <- cbind(times_i, pred_temp_sum)
kbl(table, caption = "Temperatures for sum kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
set.seed(1234567890)
library(ggplot2)
library(geosphere)
library(dplyr)
library(knitr)
library(kableExtra)
#1 Implement Kernel Method to predict hourly temp/day (4am -24pm)
# Read data
station_data <- read.csv("stations.csv")
temp_data <- read.csv("temps50k.csv")
# MErge two files with respect to station_number
st <- merge(station_data, temp_data, by = "station_number")
n = dim(st)[1]
#Coordinates of place to predict
a <- 57.6339 # Latitude
b <- 11.9399 # Longitude
po_i = c(a,b)
date_i = "1996-02-23"
times_i = c("04:00:00", "06:00:00", "08:00:00", "10:00:00",
"12:00:00", "14:00:00", "16:00:00", "18:00:00",
"20:00:00", "22:00:00", "24:00:00") #11 different times of interest
n = length(times_i)
#Remove posterior data
filtered_st = st[st$date >= "1941-08-31" & st$date >= "1996-02-23",]
#Table for coordinates
cnames1 = c("Latitude", "Longitude")
coord = c(a,b)
content = cbind(cnames1, coord)
kbl(content, caption = "Coordinates for place of interest", col.names = c("Askim", "Coordinates")) %>%
kable_styling(latex_options = "hold_position", position = "left")
####KERNEL FOR DISTANCE######
# Weighing factor for distance
h_dist <- 250000 #meter -> 250km
# Kernel 1, Function for calculating the distance from a station to a point of interest
dist_kernel = function(poi, data, h) {
dist <- distHaversine(poi, data.frame(data$latitude, data$longitude)) #returns in meter
u <- dist/h
return (exp(-u^2))
}
####KERNEL FOR DATE######
# Weighing factor for date
h_date <- 20
#Kernel 2, distance between the day a temperature measurement was made and the day of interest
day_kernel = function(doi, data, h) {
diff_tot <- (as.numeric(as.Date(data$date) - as.Date(doi), unit="days")) #difference in unit days
diffdays <- diff_tot%%365 #take the year in consideration
u <- diffdays/h
return (exp(-u^2)) #kernel
}
####KERNEL FOR TIME######
# Weighing factor for time
h_time <- 4
#Kernel 3, distance between the hour of the day a temperature measurement was made and the hour of interest
hour_kernel = function(toi, data, h) {
diff_sec <- difftime(strptime(data$time , format = "%H:%M:%S"),  #time differences in seconds
strptime(toi , format = "%H:%M:%S"))        #date-time conversion functions to and from character
diff_hour <- as.numeric(diff_sec/(3600))                              #from sec to  hour
u <- diff_hour/h
return (exp(-u^2)) #kernel
}
# Calculate the sum of the three gaussian kernels
#Function for calculate the predicted temperature by the sum of kernels at a certain time
calcSum = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, filtered_st, h_dist)
date_k = day_kernel(doi, filtered_st, h_date)
hour_k = hour_kernel(hoi, filtered_st, h_time)
sum_k <- dist_k+date_k+hour_k #summing up the kernel values
#Prediction of the temp for the 11 kernel values with (Gaussian) Kernel Regression, weighted kernel for the observations
sum_temp = sum(sum_k * filtered_st$air_temperature)/sum(sum_k)
return(sum_temp)
}
pred_temp_sum = c()
#Looping through time in times of interest and predict the temperature
for (i in 1:n) {
pred_temp_sum[i] = calcSum(filtered_st, po_i, date_i, times_i[i])
}
#Create table with the time corresponding and temperatures
table <- cbind(times_i, pred_temp_sum)
kbl(table, caption = "Temperatures for sum kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
set.seed(1234567890)
library(ggplot2)
library(geosphere)
library(dplyr)
library(knitr)
library(kableExtra)
library(readr)
#1 Implement Kernel Method to predict hourly temp/day (4am -24pm)
# Read data
station_data <- read.csv("stations.csv")
temp_data <- read.csv("temps50k.csv")
# MErge two files with respect to station_number
st <- merge(station_data, temp_data, by = "station_number")
n = dim(st)[1]
#Coordinates of place to predict
a <- 57.6339 # Latitude
b <- 11.9399 # Longitude
po_i = c(a,b)
date_i = "1996-02-23"
times_i = c("04:00:00", "06:00:00", "08:00:00", "10:00:00",
"12:00:00", "14:00:00", "16:00:00", "18:00:00",
"20:00:00", "22:00:00", "24:00:00") #11 different times of interest
n = length(times_i)
#Remove posterior data
filtered_st = st[st$date >= "1941-08-31" & st$date >= "1996-02-23",]
#Table for coordinates
cnames1 = c("Latitude", "Longitude")
coord = c(a,b)
content = cbind(cnames1, coord)
kbl(content, caption = "Coordinates for place of interest", col.names = c("Askim", "Coordinates")) %>%
kable_styling(latex_options = "hold_position", position = "left")
####KERNEL FOR DISTANCE######
# Weighing factor for distance
h_dist <- 250000 #meter -> 250km
# Kernel 1, Function for calculating the distance from a station to a point of interest
dist_kernel = function(poi, data, h) {
dist <- distHaversine(poi, data.frame(data$latitude, data$longitude)) #returns in meter
u <- dist/h
return (exp(-u^2))
}
####KERNEL FOR DATE######
# Weighing factor for date
h_date <- 20
#Kernel 2, distance between the day a temperature measurement was made and the day of interest
day_kernel = function(doi, data, h) {
diff_tot <- (as.numeric(as.Date(data$date) - as.Date(doi), unit="days")) #difference in unit days
diffdays <- diff_tot%%365 #take the year in consideration
u <- diffdays/h
return (exp(-u^2)) #kernel
}
####KERNEL FOR TIME######
# Weighing factor for time
h_time <- 4
#Kernel 3, distance between the hour of the day a temperature measurement was made and the hour of interest
hour_kernel = function(toi, data, h) {
diff_sec <- difftime(strptime(data$time , format = "%H:%M:%S"),  #time differences in seconds
strptime(toi , format = "%H:%M:%S"))        #date-time conversion functions to and from character
diff_hour <- as.numeric(diff_sec/(3600))                              #from sec to  hour
u <- diff_hour/h
return (exp(-u^2)) #kernel
}
# Calculate the sum of the three gaussian kernels
#Function for calculate the predicted temperature by the sum of kernels at a certain time
calcSum = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, filtered_st, h_dist)
date_k = day_kernel(doi, filtered_st, h_date)
hour_k = hour_kernel(hoi, filtered_st, h_time)
sum_k <- dist_k+date_k+hour_k #summing up the kernel values
#Prediction of the temp for the 11 kernel values with (Gaussian) Kernel Regression, weighted kernel for the observations
sum_temp = sum(sum_k * filtered_st$air_temperature)/sum(sum_k)
return(sum_temp)
}
pred_temp_sum = c()
#Looping through time in times of interest and predict the temperature
for (i in 1:n) {
pred_temp_sum[i] = calcSum(filtered_st, po_i, date_i, times_i[i])
}
#Create table with the time corresponding and temperatures
table <- cbind(times_i, pred_temp_sum)
kbl(table, caption = "Temperatures for sum kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
source('~/Skola/tdde01/labs_ind/lab3/assignment1/ass1.R', echo=TRUE)
#Plotting weights of the distance kernel
dist_plot = function(dist_kernel, h){
u = dist/h
plot(dist, exp(-u^2), type="l", main="Weights for distance, h = 250000", xlab="Distance", ylab = "Kernel")
}
#Sequence generator
dist = seq(0, 150000, 1)
dist_plot(dist, h_dist)
e date kernel
date_plot = function(date_kernel, h){
u = date/h
plot(date, exp(-u^2), type="l", main="Weights for date, h = 20", xlab="Days", ylab = "Kernel")
}
date = seq(0,100,1)
date_plot(date, h_date)
#----------------------------------------------------------------------------------------------------
#Plotting weights of the hour kernel
hour_plot = function(times, h){
u = times/h
plot(time, exp(-u^2), type="l", main="Weights for hour, h = 4", xlab="Hours", ylab = "Kernel")
}
time = seq(0,12,1)
hour_plot(time, h_time)
#Multiplying the kernels instead of summing them up
#Function for calculate the predicted temperature by the product of kernels at a certain time
calcProd = function(data, poi, doi, hoi) {
dist_k = dist_kernel(poi, data, h_dist)
date_k = day_kernel(doi, data, h_date)
hour_k = hour_kernel(hoi, data, h_time)
mult_k = dist_k*date_k*hour_k
#Calculate the predicted 11 kernel values for temperature with (Gaussian) Kernel Regression
mult_temp = sum(mult_k * filtered_st$air_temperature)/sum(mult_k)
return(mult_temp)
}
pred_temp_prod = c()
#Prediction of temperature for times of interest
for(i in 1:n){
pred_temp_prod[i] = calcProd(filtered_st, po_i, date_i, times_i[i])
}
#Table for values
table2 <- cbind(times_i, pred_temp_prod)
kbl(table2, caption = "Temperatures for product kernel", col.names = c("Time", "Temp")) %>%
kable_styling(latex_options = "hold_position", position = "left")
#Comparison between the summed kernels and the multiplied kernels
#Plots of the predicted temperatures
hours = seq(4, 24, 2)
plot(hours, pred_temp_sum, type="o", main="Plot for summed kernels at [1996-02-23]", ylab="Temp", xlab="Hour")
plot(hours, pred_temp_prod, type="o", main="Plot for multiplied kernels at [1996-02-23]", ylab="Temp", xlab="Hour")
setwd("~/Skola/tdde01/labs_ind/lab3/assignment3")
# Import neuralnet package.
library(neuralnet)
# Sample 500 points.
set.seed(12345) # Set seed to have reproducible results.
data1 <- runif(500,0,10)
data <- data.frame("obs"= data1, "sin" = sin(data1))
# Split data1 into training and test sets.
n <- dim(data)[1]
set.seed(12345) # Seed for reproducible results.
id <- sample(1:n, 25) # Take sample of 25 observations.
# Create train and test set.
train <- data[id,]
test <- data[-id,]
rm(n, id, data1) # Remove unnecessary variables.
?runif
data1
data1 <- runif(500,0,10)
data1
library(ggplot2) # To have good looking plots.
library(grid)
library(gridExtra)
# Plot training data
ggplot(train,aes(x=obs, y=sin)) +
labs(x="x", y="sin(x)", title = "Training data") +
geom_line(linetype="dashed", color="blue") -> p1
# Plot test data
ggplot(test, aes(x= obs, y=sin)) +
labs(x="x", y="sin(x)", title = "Test data") +
geom_line(linetype="dashed", color="darkred") -> p2
grid.arrange(p1,p2, ncol=2)
# Initialize weights in interval [-1,1]
set.seed(12345)
weight <- runif(7,-1,1)
# Fit the neural network using the train set.
set.seed(12345) # Without seed we seem to get random results.
fit.neural <- neuralnet(sin ~ obs, data= train, hidden = c(4,3), startweights = weight)
# Predict using the fit.
prediction <- predict(fit.neural, test)
# plot the prediction.
ggplot(test, aes(x=obs)) +
geom_line(aes(y = prediction, color="darkred")) +
labs(x="x", y =" Predicted sin(x)", title="Predictions on test set") +
geom_line(aes(y=sin, color="steelblue"), linetype = "dashed") +
scale_color_discrete(name = "", labels = c("Predictions", "True sin values"))
set.seed(12345) # Set seed to have reproducible results.
x <- runif(200,0,20)
data2 <- data.frame("obs"= x, "sin" = sin(x))
rm(x) # Remove unnecessary variables.
# Predict using the model from part 1.
pred2 <- predict(fit.neural, data2)
# plot the predictions on data 2
ggplot(data2, aes(x=obs)) +
geom_line(aes(y=pred2, colour="darkred")) +
labs(x = "x", y = "sin(x)", title="Predictions on new data") +
geom_line(aes(y=sin, colour="steelblue"),linetype="dashed") +
scale_color_discrete(name = "", labels = c("Predictions", "True sin values"))
# Sample 500 points.
set.seed(12345) # Set seed to have reproducible results.
data1 <- runif(500,0,10)
data3 <- data.frame("obs"= data1, "sin" = sin(data1))
rm(data1) # Remove unnecessary variables.
# Weights again
set.seed(12345)
weight <- runif(7, -1, 1)
# Train NN model on entire data 3 set.
# Use same number of hidden variables as part 1.
# Use same random weights as in part 1.
# Fit x (observations) based on it's corresponding sin value.
set.seed(12345)
fit.sin_neural <- neuralnet(obs ~ sin, data=data3, hidden=c(6), startweights = weight)
# Predict x using fitted model.
pred.x <- predict(fit.sin_neural, data3)
# Plot the predictions.
ggplot(data3, aes(y=sin)) +
geom_line(aes(x=pred.x, colour="darkred")) +
labs(x = "x", y = "sin(x)", title="Predictions on new data") +
geom_line(aes(x=obs, colour="steelblue"),linetype="dashed") +
scale_color_discrete(name = "", labels = c("Predictions", "True sin values"))
source('~/Skola/tdde01/labs_ind/lab3/assignment3/ass3_2.R', echo=TRUE)
